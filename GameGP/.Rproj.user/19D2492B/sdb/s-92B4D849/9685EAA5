{
    "collab_server" : "",
    "contents" : "# install packages\n#install.packages(\"gridExtra\")\n\n# library: always run this\nlibrary(\"readr\", lib.loc=\"~/R/win-library/3.3\")\nlibrary(\"data.table\")\nlibrary(dplyr)\nlibrary(utils)\nlibrary(gridExtra)\nlibrary(grid)\n\nsetwd(\"D:/projects/Data Mining/GameGP\")\n\n# count the number of users\nsummary1<-function(df){\n  # declare variables\n  ret <- data.frame(\"Name\"=character(), \"Value\" = character(), stringsAsFactors = FALSE)\n  \n  # count No. of the users\n  nUsers <- length(unique(df$Userid))\n  ret[nrow(ret)+1,] <- c(\"No. of users\", prettyNum(nUsers,big.mark=\",\",scientific=FALSE))\n  \n  # count No. of the games\n  nGames <- length(unique(df$Gameid))\n  ret[nrow(ret)+1,] <- c(\"No. of games\", nGames)\n  \n  # count No. of the exercises\n  nMatches <- nrow(df)\n  ret[nrow(ret)+1,] <- c(\"No. of exercises\", prettyNum(nMatches,big.mark=\",\",scientific=FALSE))\n  \n  # Period\n  dates <- range(df$Date,na.rm=TRUE)\n  ret[nrow(ret)+1,] <- c(\"First date\", format(dates[1], \"%Y-%m-%d\"))\n  ret[nrow(ret)+1,] <- c(\"Last date\", format(dates[2], \"%Y-%m-%d\"))\n  \n  # output\n  plot.new()\n  grid.draw(grid.table(ret))\n}\n\n# get a table grouped by the user\ngetUser_Matches<-function(df){\n  # create a table\n  table = data.table(df)# table1: table with less columns from source data\n  tUserFreq <- table[,.(.N), by=Userid] # do on all row, produce the count, and group by the first columns\n  #tUserFreq <- tUserFreq[order(N)]# table2: data groupeby users\n  return(tUserFreq)\n}\n\ntranspose1<-function(table){\n  \n  ma = max(table[[\"N\"]])\n  mi = min(table[[\"N\"]])\n  \n  v_nUsers <- vector(mode = \"numeric\", length = ma) # number of users on a frequence\n  \n  v_t <- 1:ma\n  for(i in 1:ma){\n    nUsers <- table[N==i, .N]\n    v_nUsers[i] <- nUsers\n  }\n  # output\n  #plot(v_nUsers, main=\"No. of users on the same no. of training days dist.\",sub = subtitle, xlab=\"No. of training days\", ylab=\"No. of Users\")\n  return(v_nUsers)\n}\n\ngetUser_Days<-function(df){\n\n  table = data.table(\"Userid\" = df$Userid, \"Date\" = df$Date)# transform\n  table = unique(table)# filter duplicate\n  table1 = table[,.(N = .N,MIN = min (Date, na.rm=TRUE), MAX = max (Date, na.rm=TRUE)), by=Userid]\n  table1 = table1[, duration := difftime(MAX, MIN, units = \"days\")]\n  \n  #transpose1(table1)\n  \n  return(table1)\n}\n\n# draw a bar for stats\nbarUsers_Days <-function(vNoDays){\n  # Bar:\n  max <-length(vNoDays)\n  xseq = c(0,1,10,30,60,90,150,200,250,300)\n  xtext = c(\">0\",\">1\",\">10\",\">30\",\">60\",\">90\",\">150\",\">200\",\">250\",\">300\")\n  v_nUsers = rep(0,length(xseq))  \n  for(i in 1:max){\n    for(j in 1:length(xseq)){\n      if(vNoDays[i]>xseq[j])\n        v_nUsers[j] = v_nUsers[j]+1\n    }\n  }\n  \n  xx <- barplot(v_nUsers, names.arg = xtext, main=\"No. of users by minimum training days dist.\", sub= subtitle, xlab=\"No. of training days\", ylab=\"No. of users\")\n  text(x = xx, y = v_nUsers, label = v_nUsers, pos = 3, cex = 0.8, col = \"blue\")\n}\n\ngetRatioMatchDays<-function(vNoMatches, vNoDays){\n  # Question: no. match by day\n  vRatioMatchDays <- vNoMatches/vNoDays\n  return(vRatioMatchDays)\n}\n\nbarUsers_Ratio <-function(vRatioMatchDays){\n  xseq = c(0,1,6,11,16)\n  xtext = c(\"0-1\",\"1-6\",\"6-11\",\"11-16\",\">16\")\n  #xseq = floor(seq(min(outcome),300, length.out = 10))\n  ind = findInterval(vRatioMatchDays,xseq)\n  ind = sort(ind)\n  fTable = table(ind)\n  fNames = as.numeric(names(fTable))\n  ybar = 1:length(xseq)\n  \n  for(i in 1:length(xseq)){\n    ybar[i] = 0\n    if(i %in% fNames){\n      ybar[i] <- fTable[match(i, fNames)]\n    }\n  }\n  \n  xx <- barplot(ybar, names.arg = xtext, main=\"No. of users grouped by no. exercises per day dist.\", sub=subtitle, xlab=\"No. of exercises by day\", ylab=\"No. of users\")\n  text(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = \"blue\")\n}\n\nbarUsers_Period<-function(vUser_Duration){\n  xseq = seq(0,365*9,by = 365)\n  xtext = c(\"0-1\",\"1-2\",\"2-3\",\"3-4\",\"4-5\",\"5-6\",\"6-7\",\"7-8\",\"8-9\",\">9\")\n  ind = findInterval(vUser_Duration,xseq)\n  ind = sort(ind)\n  fTable = table(ind)\n  fNames = as.numeric(names(fTable))\n  ybar = 1:length(xseq)\n  \n  for(i in 1:length(xseq)){\n    ybar[i] = 0\n    if(i %in% fNames){\n      ybar[i] <- fTable[match(i, fNames)]\n    }\n  }\n  \n  xx <- barplot(ybar, names.arg = xtext, main=\"No. of users grouped by usage period dist.\", sub=subtitle, xlab=\"Usage period (year), 1 year = 365 days\", ylab=\"No. of users\")\n  text(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = \"blue\")\n}\n\n# reduce the users playing more than 200 days\ngetUsers_200days <-function(tbUser_Days, tbAll){\n  vUsers200 <- tbUser_Days[N>200]$Userid\n  tb200d <- tbAll[Userid %in% vUsers200]\n  return(tb200d)\n}\n\n# ==== main =====\nmain<-function(){\n  # choose a data for analyse\n  dataSrc <- readRDS(\"data/dataStat.rds\")\n  \n  # these parameters should change everytime\n  subtitle = \"N = 31M obs., db = Game Public\"\n  pdf(\"report/GamePublicStats.pdf\")\n  \n  # main process\n  summary1(dataSrc)\n  tbUser_Matches <-getUser_Matches(dataSrc)\n  tbUser_Days<-getUser_Days(dataSrc)\n  barUsers_Days(tbUser_Days$N)\n  \n  vRatioMatchDays<-getRatioMatchDays(tbUser_Matches$N, tbUser_Days$N)\n  barUsers_Ratio(vRatioMatchDays)\n  dev.off() \n  \n  # 200 days\n  data200d <- getUsers_200days(tbUser_Days, data.table(dataSrc))\n  #saveRDS(data200d, \"data/data200d.rds\")\n  \n  subtitle = \"N = 16.8M obs., db = Game Public, Users > 200 days\"\n  pdf(\"report/200dStats.pdf\")\n  summary1(data200d)\n  tbUser_Matches <-getUser_Matches(data200d)\n  tbUser_Days<-getUser_Days(data200d)\n  vRatioMatchDays<-getRatioMatchDays(tbUser_Matches$N, tbUser_Days$N)\n  barUsers_Ratio(vRatioMatchDays)\n  barUsers_Period(tbUser_Days$duration)\n  \n  dev.off() \n}\n# ===============",
    "created" : 1513171435969.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "877039287",
    "id" : "9685EAA5",
    "lastKnownWriteTime" : 1513277059,
    "last_content_update" : 1513277059220,
    "path" : "D:/projects/Data Mining/GameGP/R/GameGP.R",
    "project_path" : "R/GameGP.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}