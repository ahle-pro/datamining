{
    "collab_server" : "",
    "contents" : "# install packages\n#install.packages(\"gridExtra\")\n\n# library: always run this\nlibrary(\"readr\", lib.loc=\"~/R/win-library/3.3\")\nlibrary(\"data.table\")\nlibrary(dplyr)\nlibrary(utils)\nlibrary(gridExtra)\nlibrary(grid)\nsetwd(\"D:/projects/Data Mining\")\n\n\n# collecting data\n# read the data form csv\n# data <- read_csv(\"data/fullGamePro.csv\", col_types = cols(Jour_PR = col_datetime(format = \"%Y-%m-%d %H:%M:%S\")))\n# saveRDS(\"data/GamePro.rds\")\ndataSrc <- readRDS(\"data/GamePro.rds\")\n\n# extract the column vectors\ndf_senior <- dataSrc[2] # senior is a list\ndf_gameId <- dataSrc[3] # gameId is a \ndf_jour <- dataSrc[\"Jour_PR\"]\n\ndata3 = data.frame(df_senior, df_gameId, df_jour)\n\n# count the number of users\ndf_u_senior <- unique(df_senior) # df u senior\ncat(\"The unique user number is \", nrow(df_u_senior))\nv_senior = c(t(df_senior)) # vector of users\n\nnbUsers = nrow(df_u_senior)\n#max(df_u_senior)\n#min(df_u_senior)\n#plot(df_senior, main=\"The distribution of users \", xlab=\"User Id\")\n#hist(v_senior, xlab = \"user group\")\n\n# statistics on gameid\nu_gameId <- unique(df_gameId)\nnbGame = nrow(u_gameId)\n#max(u_gameId)\n#minx(u_gameId)\n\n#v_gameId = c(t(gameId)) # vector of matches\n#plot(v_gameId, main=\"The distribution of played games \", xlab=\"Game Id\")\n\n# create a table\ntbAll = data.table(data3)# table1: table with less columns from source data\ntUserFreq <- tbAll[,.(.N), by=Seniorid] # do on all row, produce the count, and group by the first columns\ntUserFreq <- tUserFreq[order(N)]# table2: data groupeby users\n\nmax <-max(tUserFreq$N) # max of the matches by user\nv_nUsers <- vector(mode = \"numeric\", length = max) # number of users on a frequence\nv_freq <- 1:max\nfor(i in 1:max){\n  nUsers <- table2[N==i, .N]\n  v_nUsers[i] <- nUsers\n}\n\n# show the users on each frequence\nplot(v_nUsers, main=\"The users on each frequence\",sub=\"N = 5.8M obs., db = GamePro\", xlab=\"Frequence\", ylab=\"Users Per Frequence\")\n\n# print the matches on user\nv_freq_user = sort(table2$N)\nplot(v_freq_user, main=\"The matches on each user\", xlab=\"User\", ylab=\"Matches Per User\")\nmedian1 <- round(median(1:length(v_freq_user)))\npoints(median1, v_freq_user[median1], col=\"blue\", pch=19, cex=4)\n\n# Jour\ntbUserDays = data.table(data.frame(df_senior, df_jour))# transform\ntbUserDays = unique(tbUserDays)# filter duplicate\ntbUser_Days = tbUserDays[,.(N = .N,MIN = min (Jour_PR, na.rm=TRUE), MAX = max (Jour_PR, na.rm=TRUE)), by=Seniorid]\ntbUser_Days = tbUser_Days[, duration := difftime(MAX, MIN, units = \"days\")]\n\n# Initial Time vs. Last Time\npdf(\"report/GamePro_cmp_first_last_user.pdf\")\n# Start time\nplot(sort(tbUser_Days$MIN), main=\"First match per user\",sub=\"N = 5.8M obs., db = GamePro\", xlab = \"User (ith)\", ylab = \"First match (Date)\")\n# End time\nplot(sort(tbUser_Days$MAX), main=\"Last match per user\",sub=\"N = 5.8M obs., db = GamePro\", xlab = \"User (ith)\", ylab = \"Last match (Date)\")\n\ndev.off()\n\npdf(\"report/GamePro_cmp_period_days_user.pdf\")\nold.par <- par(mfrow=c(1, 2))\n# Playing days\nplot(sort(tbUser_Days$N), main=\"Playing days per user\",sub=\"N = 5.8M obs., db = GamePro\", xlab = \"User (ith)\", ylab = \"Playing days (days)\")\n# Playing period\nplot(sort(tbUser_Days$duration), main=\"Playing period per user\",sub=\"N = 5.8M obs., db = GamePro\", xlab = \"User (ith)\", ylab = \"Playing period (days)\")\npar(old.par)\n\ndev.off()\n\n# The statistics on user days\n# use join\nmax <-max(tbUser_Days$N) # max of days by user\nv_nDays <- 1:max\nfor(i in 1:max){\n  nUsers <- tbUser_Days[N==i, .N]\n  v_nDays[i] <- nUsers\n}\n# show the users on each number of days\nplot(v_nDays, main=\"The users on each number of days\",sub=\"N = 5.8M obs., db = GamePro\", xlab=\"Number of days\", ylab=\"Users\")\n\n# Remark 1: We need only first 100 jours\nplot(v_nDays[1:90], main=\"The users on each number of days (< 90 days)\",sub=\"N = 5.8M obs., db = GamePro\", xlab=\"Number of days\", ylab=\"Users\")\n\n# Bar:\nmax <-length(tbUser_Days$N)\nxseq = c(0,1,30,60,90,150,300)\nxtext = c(\">0\",\">1\",\">30\",\">60\",\">90\",\">150\",\">300\")\nv_nUsers = rep(0,length(xseq))  \nfor(i in 1:max){\n  for(j in 1:length(xseq)){\n    if(tbUser_Days$N[i]>xseq[j])\n      v_nUsers[j] = v_nUsers[j]+1\n  }  \n}\n\nxx <- barplot(v_nUsers, names.arg = xtext, main=\"No. of users by minimum playing days distr.\", sub=\"N = 5.8M obs., db = GamePro\", xlab=\"No. of playing days\", ylab=\"No. of users\")\ntext(x = xx, y = v_nUsers, label = v_nUsers, pos = 3, cex = 0.8, col = \"blue\")\n\n\n\n# Remark 2: view the table \nlen <-length(v_nDays)\ntbSumNoUser = matrix(c(sum(v_nDays[1:len]),sum(v_nDays[30:len]),sum(v_nDays[60:len]), sum(v_nDays[90:len]), sum(v_nDays[150:len]),sum(v_nDays[300:len])), ncol=1)\ncolnames(tbSumNoUser) <- c(\"No. of users\")\nrownames(tbSumNoUser) <- c(\" > 1 jour\", \" > 30 jours\",\"> 60 jours\",\"> 90 jours\", \"> 150 jours\", \"> 300 jours\")\n\n\npdf(\"report/GamePro_getNoUserByDays.pdf\")\nplot.new()\ngrid.table(tbSumNoUser)\ntitle(\"The classification of No. of users per playing days\")\nsummary(tbSumNoUser)\ndev.off()\n\n# Classification of observations based on the user\n# data$Seniorid <-factor(data$Seniorid)\n\n# ==== Task3: 90j ====\n# \n\nvUsers90 <- tbUser_Days[N>90]$Seniorid\ntb90d <- tbAll[Seniorid %in% vUsers90]\n#saveRDS(tb90d,\"data/tb90d.rds\")\ntb90d<-readRDS(\"data/tb90d.rds\")\n\ntmp<-copy(tb90d)\ntbUserDays = unique(tmp[, Gameid:=NULL])\ntbUser_Days = tbUserDays[,.(N = .N,MIN = min (Jour_PR, na.rm=TRUE), MAX = max (Jour_PR, na.rm=TRUE)), by=Seniorid]\ntbUser_Days = tbUser_Days[, duration := difftime(MAX, MIN, units = \"days\")]\nrm(tmp)\n\n\n\n# Question: How long they played ?\nplot(sort(tbUser_Days$duration), main=\"Playing period by user \",sub=\"N = 1.7M obs., User >90 days, db = GamePro\", ylab=\"Playing period by user\", xlab=\"User(each), from low to high\")\n\n# Question: no. match by user\ntmp<-copy(tb90d)\ntbUserMatchs = tmp[, Gameid:=NULL]\ntbUser_Matchs = tbUserMatchs[,.N , by=Seniorid]\nrm(tmp)\nplot(sort(tbUser_Matchs$N), main=\"No. of matches \",sub=\"N = 1.7M obs., User >90 days, db = GamePro\", ylab=\"No. of matches by user\", xlab=\"User(each), from low to high frequence\")\n\n# Question: How often they play ?\nvRatioDaysByMonth <- tbUser_Days$N/as.numeric(tbUser_Days$duration)*30\nplot(sort(vRatioDaysByMonth), main=\"No. of days by month (30 days) \",sub=\"N = 1.7M obs., User >90 days, db = GamePro\", ylab=\"No. of days by month\", xlab=\"User(each), from low to high frequence\")\n\n# Question: no. match by day\nvRatioMatchDays <- tbUser_Matchs$N/tbUser_Days$N\n\nplot(sort(vRatioMatchDays), main=\"No. of matches by day \",sub=\"N = 1.7M obs., User >90 days, db = GamePro\", ylab=\"No. of matches by day\", xlab=\"User(each), from low to high frequence\")\n\nxseq = c(0,1,6,11,16)\nxtext = c(\"0-1\",\"1-6\",\"6-10\",\"11-15\",\">16\")\n#xseq = floor(seq(min(outcome),300, length.out = 10))\nind = findInterval(vRatioMatchDays,xseq)\nind = sort(ind)\nfTable = table(ind)\nfNames = as.numeric(names(fTable))\nybar = 1:length(xseq)\n\nfor(i in 1:length(xseq)){\n  ybar[i] = 0\n  if(i %in% fNames){\n    ybar[i] <- fTable[match(i, fNames)]\n  }\n}\n\nxx <- barplot(ybar, names.arg = xtext, main=\"No. of matches by day on each user dist.\", sub=\"N = 1.7M obs., User >90 days, db = GamePro\", xlab=\"No. of matches by day\", ylab=\"No. of users\")\ntext(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = \"blue\")\n\n# Plot a table\nplot.new()\ngrid.draw(gtable(summary(cars)))\ntitle(\"The classification of No. of users per playing days\")\n\n# ens\n\ncompute<-function(table){\n  table = table[,.(N = .N,MIN = min (Jour_PR, na.rm=TRUE), MAX = max (Jour_PR, na.rm=TRUE)), by=Seniorid]\n  table = table[, duration := difftime(MAX, MIN, units = \"days\")]\n  # 90 days\n  plot(table$MIN)\n}\n\n\n",
    "created" : 1513603658135.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "758016235",
    "id" : "6F5108B4",
    "lastKnownWriteTime" : 1513167056,
    "last_content_update" : 1513167056,
    "path" : "D:/projects/Data Mining/GamePro/FullGamePro.R",
    "project_path" : "FullGamePro.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}