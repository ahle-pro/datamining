colnames(df)[1] <- "Userid"
colnames(df)[3] <- "Date"
return(df)
}
# df_senior <- dataSrc[2] # senior is a list
# df_gameId <- dataSrc[3] # gameId is a
# df_jour <- dataSrc["Jour_PR"]
#
# data3 = data.frame(df_senior, df_gameId, df_jour)
# saveRDS(data3, "data/data3.rds")
data3 <- readRDS("data/dataP13.rds")
subtitle = "N = 1.9M obs., db = GamePro, program = 13"
pdf("report/Programs/Program13.pdf")
# count the number of users
summary1<-function(df){
# declare variables
ret <- data.frame("Name"=character(), "Value" = character(), stringsAsFactors = FALSE)
# count No. of the users
nUsers <- length(unique(df$Userid))
ret[nrow(ret)+1,] <- c("No. of users", nUsers)
# count No. of the games
nGames <- length(unique(df$Gameid))
ret[nrow(ret)+1,] <- c("No. of games", nGames)
# count No. of the exercises
nMatches <- nrow(df)
ret[nrow(ret)+1,] <- c("No. of exercises", nMatches)
# Period
dates <- range(df$Date,na.rm=TRUE)
ret[nrow(ret)+1,] <- c("First date", format(dates[1], "%Y-%m-%d"))
ret[nrow(ret)+1,] <- c("Last date", format(dates[2], "%Y-%m-%d"))
# output
plot.new()
grid.draw(grid.table(ret))
}
summary1(data3)
getUser_X<-function(df){
# create a table
table = data.table(df)# table1: table with less columns from source data
tUserFreq <- table[,.(.N), by=Userid] # do on all row, produce the count, and group by the first columns
#tUserFreq <- tUserFreq[order(N)]# table2: data groupeby users
return(tUserFreq)
}
tUserX <-getUser_X(data3)
transpose1<-function(table){
ma = max(table[["N"]])
mi = min(table[["N"]])
v_nUsers <- vector(mode = "numeric", length = ma) # number of users on a frequence
v_t <- 1:ma
for(i in 1:ma){
nUsers <- table[N==i, .N]
v_nUsers[i] <- nUsers
}
# output
plot(v_nUsers, main="No. of users on the same no. of training days dist.",sub = subtitle, xlab="No. of training days", ylab="No. of Users")
return(v_nUsers)
}
getUser_Days<-function(df){
table = data.table("Userid" = df$Userid, "Date" = df$Date)# transform
table = unique(table)# filter duplicate
table1 = table[,.(N = .N,MIN = min (Date, na.rm=TRUE), MAX = max (Date, na.rm=TRUE)), by=Userid]
table1 = table1[, duration := difftime(MAX, MIN, units = "days")]
transpose1(table1)
return(table1)
}
vNoDays<-getUser_Days(data3)
barUsers_Days <-function(vNoDays){
# Bar:
max <-length(vNoDays)
xseq = c(0,1,10,20,30,60,90,150)
xtext = c(">0",">1",">10",">20",">30",">60",">90",150)
v_nUsers = rep(0,length(xseq))
for(i in 1:max){
for(j in 1:length(xseq)){
if(vNoDays[i]>xseq[j])
v_nUsers[j] = v_nUsers[j]+1
}
}
xx <- barplot(v_nUsers, names.arg = xtext, main="No. of users by minimum training days dist.", sub= subtitle, xlab="No. of training days", ylab="No. of users")
text(x = xx, y = v_nUsers, label = v_nUsers, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Days(vNoDays$N)
getUser_Matches<-function(tUserX){
vMatches = tUserX$N
vPlot = sort(copy(vMatches))
plot(vPlot, main="No. of users on the same no. of exercises dist.",sub=subtitle, xlab="No. of exercises", ylab="No. of users ")
return(vMatches)
}
vNoMatches<-getUser_Matches(tUserX)
getRatioMatchDays<-function(vNoMatches, vNoDays){
# Question: no. match by day
vRatioMatchDays <- vNoMatches/vNoDays
return(vRatioMatchDays)
}
vRatioMatchDays<-getRatioMatchDays(vNoMatches, vNoDays$N)
barUsers_Ratio <-function(vRatioMatchDays){
xseq = c(0,1,6,11,16)
xtext = c("0-1","1-6","6-11","11-16",">16")
#xseq = floor(seq(min(outcome),300, length.out = 10))
ind = findInterval(vRatioMatchDays,xseq)
ind = sort(ind)
fTable = table(ind)
fNames = as.numeric(names(fTable))
ybar = 1:length(xseq)
for(i in 1:length(xseq)){
ybar[i] = 0
if(i %in% fNames){
ybar[i] <- fTable[match(i, fNames)]
}
}
xx <- barplot(ybar, names.arg = xtext, main="No. of users grouped by no. exercises per day dist.", sub=subtitle, xlab="No. of exercises by day", ylab="No. of users")
text(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Ratio(vRatioMatchDays)
dev.off()
# install packages
#install.packages("gridExtra")
# library: always run this
library("readr", lib.loc="~/R/win-library/3.3")
library("data.table")
library(dplyr)
library(utils)
library(gridExtra)
library(grid)
setwd("D:/projects/Data Mining")
# collecting data
# read the data form csv
# data <- read_csv("data/fullGamePro.csv", col_types = cols(Jour_PR = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
# saveRDS("data/GamePro.rds")
#dataSrc <- readRDS("data/GamePro.rds")
# extract the column vectors
normalize1<-function(df){
colnames(df)[1] <- "Userid"
colnames(df)[3] <- "Date"
return(df)
}
# df_senior <- dataSrc[2] # senior is a list
# df_gameId <- dataSrc[3] # gameId is a
# df_jour <- dataSrc["Jour_PR"]
#
# data3 = data.frame(df_senior, df_gameId, df_jour)
# saveRDS(data3, "data/data3.rds")
data3 <- readRDS("data/dataP14.rds")
subtitle = "N = 525K obs., db = GamePro, program = 14"
pdf("report/Programs/Program14.pdf")
# count the number of users
summary1<-function(df){
# declare variables
ret <- data.frame("Name"=character(), "Value" = character(), stringsAsFactors = FALSE)
# count No. of the users
nUsers <- length(unique(df$Userid))
ret[nrow(ret)+1,] <- c("No. of users", nUsers)
# count No. of the games
nGames <- length(unique(df$Gameid))
ret[nrow(ret)+1,] <- c("No. of games", nGames)
# count No. of the exercises
nMatches <- nrow(df)
ret[nrow(ret)+1,] <- c("No. of exercises", nMatches)
# Period
dates <- range(df$Date,na.rm=TRUE)
ret[nrow(ret)+1,] <- c("First date", format(dates[1], "%Y-%m-%d"))
ret[nrow(ret)+1,] <- c("Last date", format(dates[2], "%Y-%m-%d"))
# output
plot.new()
grid.draw(grid.table(ret))
}
summary1(data3)
getUser_X<-function(df){
# create a table
table = data.table(df)# table1: table with less columns from source data
tUserFreq <- table[,.(.N), by=Userid] # do on all row, produce the count, and group by the first columns
#tUserFreq <- tUserFreq[order(N)]# table2: data groupeby users
return(tUserFreq)
}
tUserX <-getUser_X(data3)
transpose1<-function(table){
ma = max(table[["N"]])
mi = min(table[["N"]])
v_nUsers <- vector(mode = "numeric", length = ma) # number of users on a frequence
v_t <- 1:ma
for(i in 1:ma){
nUsers <- table[N==i, .N]
v_nUsers[i] <- nUsers
}
# output
plot(v_nUsers, main="No. of users on the same no. of training days dist.",sub = subtitle, xlab="No. of training days", ylab="No. of Users")
return(v_nUsers)
}
getUser_Days<-function(df){
table = data.table("Userid" = df$Userid, "Date" = df$Date)# transform
table = unique(table)# filter duplicate
table1 = table[,.(N = .N,MIN = min (Date, na.rm=TRUE), MAX = max (Date, na.rm=TRUE)), by=Userid]
table1 = table1[, duration := difftime(MAX, MIN, units = "days")]
transpose1(table1)
return(table1)
}
vNoDays<-getUser_Days(data3)
barUsers_Days <-function(vNoDays){
# Bar:
max <-length(vNoDays)
xseq = c(0,1,10,20,30,60,90,150)
xtext = c(">0",">1",">10",">20",">30",">60",">90",150)
v_nUsers = rep(0,length(xseq))
for(i in 1:max){
for(j in 1:length(xseq)){
if(vNoDays[i]>xseq[j])
v_nUsers[j] = v_nUsers[j]+1
}
}
xx <- barplot(v_nUsers, names.arg = xtext, main="No. of users by minimum training days dist.", sub= subtitle, xlab="No. of training days", ylab="No. of users")
text(x = xx, y = v_nUsers, label = v_nUsers, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Days(vNoDays$N)
getUser_Matches<-function(tUserX){
vMatches = tUserX$N
vPlot = sort(copy(vMatches))
plot(vPlot, main="No. of users on the same no. of exercises dist.",sub=subtitle, xlab="No. of exercises", ylab="No. of users ")
return(vMatches)
}
vNoMatches<-getUser_Matches(tUserX)
getRatioMatchDays<-function(vNoMatches, vNoDays){
# Question: no. match by day
vRatioMatchDays <- vNoMatches/vNoDays
return(vRatioMatchDays)
}
vRatioMatchDays<-getRatioMatchDays(vNoMatches, vNoDays$N)
barUsers_Ratio <-function(vRatioMatchDays){
xseq = c(0,1,6,11,16)
xtext = c("0-1","1-6","6-11","11-16",">16")
#xseq = floor(seq(min(outcome),300, length.out = 10))
ind = findInterval(vRatioMatchDays,xseq)
ind = sort(ind)
fTable = table(ind)
fNames = as.numeric(names(fTable))
ybar = 1:length(xseq)
for(i in 1:length(xseq)){
ybar[i] = 0
if(i %in% fNames){
ybar[i] <- fTable[match(i, fNames)]
}
}
xx <- barplot(ybar, names.arg = xtext, main="No. of users grouped by no. exercises per day dist.", sub=subtitle, xlab="No. of exercises by day", ylab="No. of users")
text(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Ratio(vRatioMatchDays)
dev.off()
# install packages
#install.packages("gridExtra")
# library: always run this
library("readr", lib.loc="~/R/win-library/3.3")
library("data.table")
library(dplyr)
library(utils)
library(gridExtra)
library(grid)
setwd("D:/projects/Data Mining")
# collecting data
# read the data form csv
# data <- read_csv("data/fullGamePro.csv", col_types = cols(Jour_PR = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
# saveRDS("data/GamePro.rds")
#dataSrc <- readRDS("data/GamePro.rds")
# extract the column vectors
normalize1<-function(df){
colnames(df)[1] <- "Userid"
colnames(df)[3] <- "Date"
return(df)
}
# df_senior <- dataSrc[2] # senior is a list
# df_gameId <- dataSrc[3] # gameId is a
# df_jour <- dataSrc["Jour_PR"]
#
# data3 = data.frame(df_senior, df_gameId, df_jour)
# saveRDS(data3, "data/data3.rds")
# data3 <- readRDS("data/dataP14.rds")
# subtitle = "N = 525K obs., db = GamePro, program = 14"
data3 <- readRDS("data/dataStat.rds")
subtitle = "N = 5.2M obs., db = GamePro"
pdf("report/Programs/Program14.pdf")
# count the number of users
summary1<-function(df){
# declare variables
ret <- data.frame("Name"=character(), "Value" = character(), stringsAsFactors = FALSE)
# count No. of the users
nUsers <- length(unique(df$Userid))
ret[nrow(ret)+1,] <- c("No. of users", nUsers)
# count No. of the games
nGames <- length(unique(df$Gameid))
ret[nrow(ret)+1,] <- c("No. of games", nGames)
# count No. of the exercises
nMatches <- nrow(df)
ret[nrow(ret)+1,] <- c("No. of exercises", nMatches)
# Period
dates <- range(df$Date,na.rm=TRUE)
ret[nrow(ret)+1,] <- c("First date", format(dates[1], "%Y-%m-%d"))
ret[nrow(ret)+1,] <- c("Last date", format(dates[2], "%Y-%m-%d"))
# output
plot.new()
grid.draw(grid.table(ret))
}
summary1(data3)
getUser_X<-function(df){
# create a table
table = data.table(df)# table1: table with less columns from source data
tUserFreq <- table[,.(.N), by=Userid] # do on all row, produce the count, and group by the first columns
#tUserFreq <- tUserFreq[order(N)]# table2: data groupeby users
return(tUserFreq)
}
tUserX <-getUser_X(data3)
transpose1<-function(table){
ma = max(table[["N"]])
mi = min(table[["N"]])
v_nUsers <- vector(mode = "numeric", length = ma) # number of users on a frequence
v_t <- 1:ma
for(i in 1:ma){
nUsers <- table[N==i, .N]
v_nUsers[i] <- nUsers
}
# output
plot(v_nUsers, main="No. of users on the same no. of training days dist.",sub = subtitle, xlab="No. of training days", ylab="No. of Users")
return(v_nUsers)
}
getUser_Days<-function(df){
table = data.table("Userid" = df$Userid, "Date" = df$Date)# transform
table = unique(table)# filter duplicate
table1 = table[,.(N = .N,MIN = min (Date, na.rm=TRUE), MAX = max (Date, na.rm=TRUE)), by=Userid]
table1 = table1[, duration := difftime(MAX, MIN, units = "days")]
transpose1(table1)
return(table1)
}
vNoDays<-getUser_Days(data3)
barUsers_Days <-function(vNoDays){
# Bar:
max <-length(vNoDays)
xseq = c(0,1,10,20,30,60,90,150)
xtext = c(">0",">1",">10",">20",">30",">60",">90",">150")
v_nUsers = rep(0,length(xseq))
for(i in 1:max){
for(j in 1:length(xseq)){
if(vNoDays[i]>xseq[j])
v_nUsers[j] = v_nUsers[j]+1
}
}
xx <- barplot(v_nUsers, names.arg = xtext, main="No. of users by minimum training days dist.", sub= subtitle, xlab="No. of training days", ylab="No. of users")
text(x = xx, y = v_nUsers, label = v_nUsers, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Days(vNoDays$N)
getUser_Matches<-function(tUserX){
vMatches = tUserX$N
vPlot = sort(copy(vMatches))
plot(vPlot, main="No. of users on the same no. of exercises dist.",sub=subtitle, xlab="No. of exercises", ylab="No. of users ")
return(vMatches)
}
vNoMatches<-getUser_Matches(tUserX)
getRatioMatchDays<-function(vNoMatches, vNoDays){
# Question: no. match by day
vRatioMatchDays <- vNoMatches/vNoDays
return(vRatioMatchDays)
}
vRatioMatchDays<-getRatioMatchDays(vNoMatches, vNoDays$N)
barUsers_Ratio <-function(vRatioMatchDays){
xseq = c(0,1,6,11,16)
xtext = c("0-1","1-6","6-11","11-16",">16")
#xseq = floor(seq(min(outcome),300, length.out = 10))
ind = findInterval(vRatioMatchDays,xseq)
ind = sort(ind)
fTable = table(ind)
fNames = as.numeric(names(fTable))
ybar = 1:length(xseq)
for(i in 1:length(xseq)){
ybar[i] = 0
if(i %in% fNames){
ybar[i] <- fTable[match(i, fNames)]
}
}
xx <- barplot(ybar, names.arg = xtext, main="No. of users grouped by no. exercises per day dist.", sub=subtitle, xlab="No. of exercises by day", ylab="No. of users")
text(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Ratio(vRatioMatchDays)
dev.off()
# install packages
#install.packages("gridExtra")
# library: always run this
library("readr", lib.loc="~/R/win-library/3.3")
library("data.table")
library(dplyr)
library(utils)
library(gridExtra)
library(grid)
setwd("D:/projects/Data Mining")
# collecting data
# read the data form csv
# data <- read_csv("data/fullGamePro.csv", col_types = cols(Jour_PR = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
# saveRDS("data/GamePro.rds")
#dataSrc <- readRDS("data/GamePro.rds")
# extract the column vectors
normalize1<-function(df){
colnames(df)[1] <- "Userid"
colnames(df)[3] <- "Date"
return(df)
}
# df_senior <- dataSrc[2] # senior is a list
# df_gameId <- dataSrc[3] # gameId is a
# df_jour <- dataSrc["Jour_PR"]
#
# data3 = data.frame(df_senior, df_gameId, df_jour)
# saveRDS(data3, "data/data3.rds")
# data3 <- readRDS("data/dataP14.rds")
# subtitle = "N = 525K obs., db = GamePro, program = 14"
# pdf("report/Programs/Program14.pdf")
data3 <- readRDS("data/dataStat.rds")
subtitle = "N = 5.2M obs., db = GamePro"
pdf("report/Programs/ProgramAll.pdf")
# count the number of users
summary1<-function(df){
# declare variables
ret <- data.frame("Name"=character(), "Value" = character(), stringsAsFactors = FALSE)
# count No. of the users
nUsers <- length(unique(df$Userid))
ret[nrow(ret)+1,] <- c("No. of users", nUsers)
# count No. of the games
nGames <- length(unique(df$Gameid))
ret[nrow(ret)+1,] <- c("No. of games", nGames)
# count No. of the exercises
nMatches <- nrow(df)
ret[nrow(ret)+1,] <- c("No. of exercises", nMatches)
# Period
dates <- range(df$Date,na.rm=TRUE)
ret[nrow(ret)+1,] <- c("First date", format(dates[1], "%Y-%m-%d"))
ret[nrow(ret)+1,] <- c("Last date", format(dates[2], "%Y-%m-%d"))
# output
plot.new()
grid.draw(grid.table(ret))
}
summary1(data3)
getUser_X<-function(df){
# create a table
table = data.table(df)# table1: table with less columns from source data
tUserFreq <- table[,.(.N), by=Userid] # do on all row, produce the count, and group by the first columns
#tUserFreq <- tUserFreq[order(N)]# table2: data groupeby users
return(tUserFreq)
}
tUserX <-getUser_X(data3)
transpose1<-function(table){
ma = max(table[["N"]])
mi = min(table[["N"]])
v_nUsers <- vector(mode = "numeric", length = ma) # number of users on a frequence
v_t <- 1:ma
for(i in 1:ma){
nUsers <- table[N==i, .N]
v_nUsers[i] <- nUsers
}
# output
plot(v_nUsers, main="No. of users on the same no. of training days dist.",sub = subtitle, xlab="No. of training days", ylab="No. of Users")
return(v_nUsers)
}
getUser_Days<-function(df){
table = data.table("Userid" = df$Userid, "Date" = df$Date)# transform
table = unique(table)# filter duplicate
table1 = table[,.(N = .N,MIN = min (Date, na.rm=TRUE), MAX = max (Date, na.rm=TRUE)), by=Userid]
table1 = table1[, duration := difftime(MAX, MIN, units = "days")]
transpose1(table1)
return(table1)
}
vNoDays<-getUser_Days(data3)
barUsers_Days <-function(vNoDays){
# Bar:
max <-length(vNoDays)
xseq = c(0,1,10,20,30,60,90,150)
xtext = c(">0",">1",">10",">20",">30",">60",">90",">150")
v_nUsers = rep(0,length(xseq))
for(i in 1:max){
for(j in 1:length(xseq)){
if(vNoDays[i]>xseq[j])
v_nUsers[j] = v_nUsers[j]+1
}
}
xx <- barplot(v_nUsers, names.arg = xtext, main="No. of users by minimum training days dist.", sub= subtitle, xlab="No. of training days", ylab="No. of users")
text(x = xx, y = v_nUsers, label = v_nUsers, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Days(vNoDays$N)
getUser_Matches<-function(tUserX){
vMatches = tUserX$N
vPlot = sort(copy(vMatches))
plot(vPlot, main="No. of users on the same no. of exercises dist.",sub=subtitle, xlab="No. of exercises", ylab="No. of users ")
return(vMatches)
}
vNoMatches<-getUser_Matches(tUserX)
getRatioMatchDays<-function(vNoMatches, vNoDays){
# Question: no. match by day
vRatioMatchDays <- vNoMatches/vNoDays
return(vRatioMatchDays)
}
vRatioMatchDays<-getRatioMatchDays(vNoMatches, vNoDays$N)
barUsers_Ratio <-function(vRatioMatchDays){
xseq = c(0,1,6,11,16)
xtext = c("0-1","1-6","6-11","11-16",">16")
#xseq = floor(seq(min(outcome),300, length.out = 10))
ind = findInterval(vRatioMatchDays,xseq)
ind = sort(ind)
fTable = table(ind)
fNames = as.numeric(names(fTable))
ybar = 1:length(xseq)
for(i in 1:length(xseq)){
ybar[i] = 0
if(i %in% fNames){
ybar[i] <- fTable[match(i, fNames)]
}
}
xx <- barplot(ybar, names.arg = xtext, main="No. of users grouped by no. exercises per day dist.", sub=subtitle, xlab="No. of exercises by day", ylab="No. of users")
text(x = xx, y = ybar, label = ybar, pos = 3, cex = 0.8, col = "blue")
}
barUsers_Ratio(vRatioMatchDays)
dev.off()
